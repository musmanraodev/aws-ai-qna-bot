process.env.AWS_PROFILE=require('../../../config').profile
process.env.AWS_DEFAULT_REGION=require('../../../config').profile
var handler=require('../index').handler
var Promise=require('bluebird')
var cfn=Promise.promisifyAll(require('../index'),{multiArgs:true})
var env=require('../../../bin/exports')()

module.exports={
    error:function(test){    
        env.then(function(envs){
        handler({
            endpoint:envs["QNA-DEV-MASTER-ES"],
            method:'HEAD',
            path:"/test/test/test",
        },{},function(error,result){
            test.ok(error)
            console.log("result:",JSON.stringify(result,null,2))
            test.done()
        })
        })
    },
    get:function(test){    
        env.then(function(envs){
        handler({
            endpoint:envs["QNA-DEV-MASTER-ES"],
            method:'GET',
            path:"/",
        },{},function(error,result){
            test.ifError(error)
            test.ok(result)
            console.log("result:",JSON.stringify(result,null,2))
            test.done()
        })
        })
    },
    post:function(test){
        env.then(function(envs){
        handler({
            endpoint:envs["QNA-DEV-MASTER-ES"],
            method:'POST',
            path:"/"+envs["QNA-DEV-INDEX"]+'/'+envs["QNA-DEV-TYPE"]+'/test',
            body:{
                qid:"test"
            }
        },{},function(error,result){
            test.ifError(error)
            test.ok(result)
            console.log("result:",JSON.stringify(result,null,2))
            test.done()
        })
        })
    },
    bulk:function(test){    
        env.then(function(envs){
        handler({
            endpoint:envs["QNA-DEV-ES-ADDRESS"],
            method:'POST',
            path:"/_bulk",
            body:[
                {delete:{
                    _index:envs["QNA-DEV-INDEX"],
                    _type:envs["QNA-DEV-TYPE"],
                    _id:"test-tmp.1"    
                }},
                {delete:{
                    _index:envs["QNA-DEV-INDEX"],
                    _type:envs["QNA-DEV-TYPE"],
                    _id:"test-tmp.2"    
                }}
            ]
        },{},function(error,result){
            console.log("error:"+JSON.stringify(error))
            test.ifError(error)
            test.ok(result)
            console.log("result:",JSON.stringify(result,null,2))
            test.done()
        })
        })
    },
    create:function(test){  
        env.then(function(envs){
            return cfn.CreateAsync({create:{ 
                endpoint:envs["QNA-DEV-MASTER-ES"],
                method:'GET',
                path:"/"
            }})
        })
        .tap(console.log)
        .then(test.ok)
        .catch(test.ifError)
        .finally(test.done)
    },
    update:function(test){
        env.then(function(envs){
            return cfn.UpdateAsync("",{create:{ 
                endpoint:envs["QNA-DEV-MASTER-ES"],
                method:'GET',
                path:"/"
            }},{})
        })
        .tap(console.log)
        .then(test.ok)
        .catch(test.ifError)
        .finally(test.done)
    },
    delete:function(test){
        env.then(function(envs){
            return cfn.DeleteAsync("",{delete:{ 
                endpoint:envs["QNA-DEV-MASTER-ES"],
                method:'GET',
                path:"/"
            }})
        })
        .tap(console.log)
        .then(test.ok)
        .catch(test.ifError)
        .finally(test.done)
    }
}
